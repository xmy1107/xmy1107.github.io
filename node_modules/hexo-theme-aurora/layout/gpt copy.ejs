<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="icon" href="/favicon.ico">
    <script type="module" crossorigin src="/static/js/120aa8f8.js"></script>
    <link rel="stylesheet" href="/static/css/a14e1a22.css">
    <!-- 引入 KaTeX -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css">
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js"></script>
    <!-- 引入 marked.js 和 DOMPurify 库 -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.4.0/dist/purify.min.js"></script>
</head>

<body id="body-container">
    <noscript>
        <strong>We're sorry but this app doesn't work properly without JavaScript enabled.
            Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>

    <!-- Aurora 机器人聊天框，固定在页面左下角 -->
    <div id="aurora-chatbox" style="
    position: fixed;
    bottom: 200px;
    left: 20px;
    width: 300px;
    background-color: #f9f9f9;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    z-index: 9999;">
        <p style="margin: 0; font-size: 14px; color: #333;">随便问点啥</p>
        <input type="text" id="userInput" placeholder="输入你的问题..." 
            style="width: 100%; padding: 5px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc;" />
        <button id="sendMessage" style="
            margin-top: 5px; 
            width: 100%; 
            padding: 5px; 
            background-color: #007bff; 
            color: #fff; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer;">
            发送
        </button>
        <div id="responseBox" style="margin-top: 10px; font-size: 12px; color: #555;"></div>
    </div>

    <!-- JavaScript 逻辑 -->
    <script>
        const API_KEY = "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"; // 替换为你的 OpenAI API 密钥
        const API_URL = "https://api.openai.com/v1/chat/completions";

        // 发送消息的逻辑封装成函数
        async function sendMessage() {
            const userInput = document.getElementById("userInput").value.trim();
            const responseBox = document.getElementById("responseBox");

            if (!userInput) {
                responseBox.innerText = "请输入你的问题！";
                return;
            }

            responseBox.innerText = "思考中，请稍等...";

            try {
                // 发起 API 请求
                const response = await fetch(API_URL, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${API_KEY}`
                    },
                    body: JSON.stringify({
                        model: "gpt-4o-mini", // 使用 GPT-4o-mini
                        messages: [
                            { role: "system", content: "你是一个网站的助手，下面我会给你一些这个网站的相关信息。\
                            \n网站的主人叫虚名羊，网站是用hexo搭建的，网站链接是https://xmy1107.github.io/，\
                            内容以技术和生活为主。\n请确保所有包含数学公式的回答使用 Markdown 格式输出。" },
                            { role: "user", content: userInput }
                        ]
                    })
                });

                if (!response.ok) {
                    throw new Error("API 请求失败，请检查网络或密钥。");
                }

                const data = await response.json();
                const gptResponse = data.choices[0].message.content;
                console.log("GPT Response:", gptResponse);
                // 1. 提前替换数学公式为占位符，避免被 marked 破坏
                const placeholder = '%%MATH_FORMULA%%';
                let mathBlocks = [];
                // const preprocessedResponse = gptResponse.replace(/\\\[([^\]]+)\\\]|\\\(([^\)]+)\\\)/g, (match) => {
                //     mathBlocks.push(match);
                //     return placeholder;
                // });
                const preprocessedResponse = gptResponse.replace(/\\\[.*?\\\]|\\\(.*?\\\)/gs, (match) => {
                    mathBlocks.push(match);
                    return placeholder;
                });
                // 2. 使用 marked 渲染 Markdown
                const renderedHTML = marked.parse(preprocessedResponse);

                // 3. 替换回原始数学公式
                let finalHTML = renderedHTML;
                mathBlocks.forEach((math, i) => {
                    finalHTML = finalHTML.replace(placeholder, math);
                });

                // 4. 安全地插入 HTML
                responseBox.innerHTML = DOMPurify.sanitize(finalHTML);

                // 5. 渲染数学公式
                renderMathInElement(responseBox, {
                    delimiters: [
                        { left: "\\(", right: "\\)", display: false }, // 行内公式
                        { left: "\\[", right: "\\]", display: true }  // 块级公式
                    ],
                    throwOnError: false
                });
            } catch (error) {
                responseBox.innerText = "抱歉，出错了：" + error.message;
            }

            // 清空输入框
            document.getElementById("userInput").value = "";
        }

        // 点击发送按钮触发
        document.getElementById("sendMessage").addEventListener("click", sendMessage);

        // 回车键监听输入框
        document.getElementById("userInput").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); // 阻止默认行为（如提交表单）
                sendMessage(); // 调用发送消息函数
            }
        });
    </script>
</body>

</html>