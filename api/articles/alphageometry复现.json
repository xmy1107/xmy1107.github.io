{"title":"alphageometry复现","uid":"fe9abd9ce7a18acea215fd553ff20b5e","slug":"alphageometry复现","date":"2025-07-03T10:48:15.000Z","updated":"2025-07-08T06:09:48.852Z","comments":true,"path":"api/articles/alphageometry复现.json","keywords":null,"cover":[],"content":"<h1>Code</h1>\n<p><a href=\"https://github.com/google-deepmind/alphageometry\">项目链接</a></p>\n<p>fixed：<a href=\"http://numericals.py\">numericals.py</a>\tcheck_cyclic\t(a, b, c), *ps = points =&gt; a, b, c, *ps = points</p>\n<h1>Method</h1>\n<p><a href=\"https://zhuanlan.zhihu.com/p/679166024\">论文概要</a></p>\n<h1>AlphaGeometry Syntax</h1>\n<p><a href=\"https://www.zhihu.com/question/640049082\">解读1（from知乎）</a></p>\n<p><a href=\"https://docs.google.com/document/d/1K4QspqnGFCJ9hpFyPUvaJXE7SAWbt3XRBBtyXzGhsOo/edit?tab=t.0\">解读2（from谷歌共享文档）</a></p>\n<p><a href=\"https://github.com/tpgh24/ag4masses?tab=readme-ov-file#the-problem-definition-language\">解读3（from某github项目）</a></p>\n<p>原语：</p>\n<p><code>coll a b c</code> : points <code>a b c</code> are collinear</p>\n<p><code>cong a b c e</code> : segments <code>ab</code> and <code>cd</code> are congruent (length equal)</p>\n<p><code>contri a b c p q r</code> : triangles <code>abc</code> and <code>pqr</code> are congruent</p>\n<p><code>cyclic a b c d</code> : 4 points <code>a b c d</code> are cocyclic</p>\n<p><code>eqangle a b c d p q r s</code> : the angles between lines <code>ab-cd</code> and <code>pq-rs</code> are equal. <strong>Note that angles have directions (signs)</strong> so the order between <code>a b</code> and <code>c d</code> matters. <code>eqangle a b c d c d a b</code> is false. The way to think about it is, angle <code>ab-cd</code> is the angle to turn line <code>ab</code> <strong>clockwise</strong> so it is parallel with the line <code>cd</code>. You can use counter-clockwise as the convention too, as long as for all angles the same convention is used</p>\n<p><code>eqratio a b c d p q r s</code> : segment length <code>ab/cd = pq/rs</code></p>\n<p><code>midp m a b</code> : point <code>m</code> is the midpoint of <code>a</code> and <code>b</code></p>\n<p><code>para a b c d</code> : segments <code>ab</code> and <code>cd</code> are parallel</p>\n<p><code>perp a b c d</code> : segments <code>ab</code> and <code>cd</code> are perpendicular to each other</p>\n<p><code>simtri a b c p q r</code> : triangles <code>abc</code> and <code>pqr</code> are similar</p>\n<p>DD推导的公式基于<code>rules.txt</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perp A B C D, perp C D E F, ncoll A B E =&gt; para A B E F\t\t# AB ⊥ CD, CD ⊥ EF, ABE不共线 =&gt; AB // EF</span><br><span class=\"line\">cong O A O B, cong O B O C, cong O C O D =&gt; cyclic A B C D\t# OA = OB, OB = OC, OC = OD =&gt; ABCD共圆</span><br><span class=\"line\">eqangle A B P Q C D P Q =&gt; para A B C D</span><br><span class=\"line\">cyclic A B P Q =&gt; eqangle P A P B Q A Q B</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>所有的操作都记录在<code>defs.txt</code>中，<a href=\"https://github.com/tpgh24/ag4masses/blob/main/data/ag_defs.jpg\">操作表</a>：</p>\n<p>六行为一组：<code>construction, rely, deps, basics, numerics, _ = data.split('\\n')</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angle_mirror x a b c\t\t\t# 对角abc以bc为对称轴作镜像反转</span><br><span class=\"line\">x : a b c x\t\t\t\t\t\t# x由abcx决定</span><br><span class=\"line\">a b c = ncoll a b c\t\t\t\t# abc需要满足的条件</span><br><span class=\"line\">x : eqangle b a b c b c b x\t\t# ∠abc = ∠xbc</span><br><span class=\"line\">amirror a b c\t\t\t\t\t# 另一种表示</span><br><span class=\"line\"></span><br><span class=\"line\">circle x a b c\t\t\t\t\t# 定义x为由abc确定的圆的圆心</span><br><span class=\"line\">x : a b c</span><br><span class=\"line\">a b c = ncoll a b c</span><br><span class=\"line\">x : cong x a x b, cong x b x c\t# xa = xb = xc</span><br><span class=\"line\">bline a b, bline a c\t\t\t# bline代表中垂线，这句是第一句的另一种表示</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>点+ ‘=’ + 1-2个操作 =&gt; 点的构造，点的构造间用分号分隔。以一道证明垂心的题举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orthocenter</span><br><span class=\"line\">a b c = triangle; h = on_tline b a c, on_tline c a b ? perp a h b c</span><br><span class=\"line\"># abc为一三角形；hb ⊥ ac 并且 hc ⊥ ab。证明ha垂直bc</span><br></pre></td></tr></table></figure>\n<p>tips：</p>\n<p>空格敏感，出现一个多余空格，哪怕不是在当前题目中，也会无法运行</p>\n<h1>Configuration</h1>\n<p><a href=\"https://github.com/google-deepmind/alphageometry/issues/101\">issue：GPU用不了</a></p>\n<p><code>meliad</code>库需要<code>git checkout e8af054</code></p>\n<h1>Data Generation</h1>\n<h2 id=\"随机生成图\">随机生成图</h2>\n<p><code>image_generate.py</code>将常用的一些操作分为三类调用，除了第一句的<code>segment a b</code>或<code>triangle a b c</code>外，剩下每轮加一个点，每个点用以下三类调用中的其中一种生成</p>\n<p>第三类调用较为特殊，可以通过生成两个条件，即两条线唯一确定一个点，也可以只生成一个条件，表明点在这条线上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calls1 = [\"circle\"]               # 3 点 → 点</span><br><span class=\"line\">calls2 = [\"midpoint\", \"mirror\"]   # 2 点 → 点</span><br><span class=\"line\">calls3 = [\"on_line\",\"on_tline\",\"on_bline\",\"on_circle\",\"on_pline\"]  # 2 点 → 线</span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化\">可视化</h2>\n<p><code>draw.py</code> 利用 <code>DDAR</code> 中提供的 <code>graph</code> 等模块用于可视化，便于debug。由于上面的随机生成图不是一道完整的题目，没有证明目标 <code>goal</code> ，所以自然不能 <code>write_solution</code> 和结合 <code>premises</code> 和 <code>goal</code> 检验题目的正确性，<code>graph.py</code> 内 <code>build_problem</code>对应的部分要注释掉。</p>\n<h2 id=\"加入发现辅助点模块\">加入发现辅助点模块</h2>\n<p>随机生成的图是依次加点实现的，在加点过程中，如果产生了新的结论，且新的结论中包含的点不含这个新加的点，说明新点是辅助点。</p>\n<p><code>ddar.get_proof_steps</code> 等地方提供的方法只能由 <code>goal</code> 出发生成依赖关系，但由前文所述，随机生成的内容不包含 <code>goal</code>，自己手动造结论很可能出现冲突导致异常，造出正确且不是条件中的结论很难，急需一个遍历所有结论的方法。</p>\n<p>如果对 <code>trace_back.py</code> <code>geometry.py</code>等代码有足够深的理解可能可以直接调用其数据结构，我能想到的替代方案是在 <code>graph.py</code> 中 <code>add_algebra</code> 中加一句 <code>self.all_conclusions.append([name] + [a.name for a in args])</code>，可以收集所有可达结论（后面提到这里的结论是假的，不全的）。</p>\n<p>然后便遇到了同构问题，在规定其格式后解决，但依然会有“假”辅助点。因为DDAR虽然是一直运行到结论形成闭包，但内部并不是将所有结论存起来，而是将父类<code>Node</code> 分为 <code>Point,Line,Angle</code> 等子类，所谓的闭包是说这些子类之间无法产生新的结论。只能通过 <code>check</code> 得到单对 <code>Node</code> 之间的关系。不过这个问题只要调用 <code>write_solution</code> 进行进一步检验即可，在输出证明过程的时候会输出其中的辅助点，不为空即可行。</p>\n<p>之后又碰到一个新问题，即便 DDAR 引擎判为辅助点也不代表这个点非加不可，只能是这个证明中必须要这个点，删掉以后就不成立；实际的辅助点需要对于任意证明都需要加这样一个新的点。不过这样训出来的模型可以添加 DDAR 认为是辅助点的点。</p>\n<p>TODO：用枚举方法生成结论，生成更高质量的数据</p>\n<h2 id=\"生成数据\">生成数据</h2>\n<h2 id=\"训练模型\">训练模型</h2>\n<p><a href=\"https://github.com/OpenNMT/OpenNMT-py\">OpenNMT</a></p>\n<h1>Encoutered problems</h1>\n<ul>\n<li>有<code>AB = BC, AB = AD</code>，但无<code>AC = BD</code>。这里的发现让我多一层检查：将最新加的点删除如果依然能证明说明这个点不算辅助点。</li>\n</ul>\n<p><img src=\"alphageometry%E5%A4%8D%E7%8E%B0/image-20250707133220846.png\" alt=\"image-20250707133220846\"></p>\n<p><img src=\"alphageometry%E5%A4%8D%E7%8E%B0/image-20250707134712016.png\" alt=\"image-20250707134712016\"></p>\n<ul>\n<li>\n<p>垂心的结论去掉以后，光由DDAR推导无法推到该结论，说明结论应当通过枚举获得。</p>\n</li>\n<li>\n<p>这里的<code>∠(EB-CD) = ∠(EC-AB)</code>是对的，开始搞错了</p>\n</li>\n</ul>\n<p><img src=\"alphageometry%E5%A4%8D%E7%8E%B0/image-20250707141750313.png\" alt=\"image-20250707141750313\"></p>\n<ul>\n<li>能训出让DDAR认为是辅助点的辅助点添加建议</li>\n</ul>\n<p><img src=\"alphageometry%E5%A4%8D%E7%8E%B0/image-20250708135619534.png\" alt=\"image-20250708135619534\"></p>\n","text":"Code 项目链接 fixed：numericals.py check_cyclic (a, b, c), *ps = points => a, b, c, *...","permalink":"/post/alphageometry复现","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Method</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">AlphaGeometry Syntax</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Configuration</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Data Generation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%9B%BE\"><span class=\"toc-text\">随机生成图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96\"><span class=\"toc-text\">可视化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%85%A5%E5%8F%91%E7%8E%B0%E8%BE%85%E5%8A%A9%E7%82%B9%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">加入发现辅助点模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">生成数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">训练模型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Encoutered problems</span></a></li></ol>","author":{"name":"蜗角虚名羊","slug":"blog-author","avatar":"/pictures/logo.jpg","link":"/","description":"<p>暂时还没想到要说什么<br>但又不想留白</p>","socials":{"github":"https://github.com/xmy1107","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/xumingyang0","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"2024年度总结","uid":"a43501af752cd97a928bbdf7b9795fd7","slug":"2024年度总结","date":"2024-12-09T08:30:10.000Z","updated":"2025-01-02T15:32:27.803Z","comments":true,"path":"api/articles/2024年度总结.json","keywords":null,"cover":[],"text":"Part 1: ACM 比赛 去各地比赛的地图（标签可拖动） 网页里写的很全了，我文字也写一下吧，中间有很多坎坷，也有很多心路历程，但已经在别处记录过了，就不再...","permalink":"/post/2024年度总结","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}],"author":{"name":"蜗角虚名羊","slug":"blog-author","avatar":"/pictures/logo.jpg","link":"/","description":"<p>暂时还没想到要说什么<br>但又不想留白</p>","socials":{"github":"https://github.com/xmy1107","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/xumingyang0","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"大模型学习","uid":"790f0da8c2ac27cfc9217b88b39debdd","slug":"大模型学习","date":"2025-07-01T22:01:02.000Z","updated":"2025-07-03T02:17:06.206Z","comments":true,"path":"api/articles/大模型学习.json","keywords":null,"cover":null,"text":"知识点： RNN：用于处理序列数据的神经网络，比FNN多“记忆”能力 https://www.runoob.com/nlp/recurrent-neural-n...","permalink":"/post/大模型学习","photos":[],"count_time":{"symbolsCount":185,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"大模型","slug":"大模型","count":1,"path":"api/tags/大模型.json"}],"author":{"name":"蜗角虚名羊","slug":"blog-author","avatar":"/pictures/logo.jpg","link":"/","description":"<p>暂时还没想到要说什么<br>但又不想留白</p>","socials":{"github":"https://github.com/xmy1107","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/xumingyang0","juejin":"","customs":{}}}}}