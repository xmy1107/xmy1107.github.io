<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年度总结</title>
      <link href="//post/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1>Part 1: ACM</h1><h3 id="比赛">比赛</h3><p><a href="/htmls/map.html">去各地比赛的地图，标签可拖动</a></p><p>网页里写的很全了，我文字也写一下吧，中间有很多坎坷，也有很多心路历程，但已经在别处记录过了，就不再赘述</p><p>2024年4月，团体程序设计天梯赛二等奖</p><p>2024年4月，浙江省大学生程序设计竞赛季军</p><p>2024年5月，河南省大学生程序设计竞赛第六名</p><p>2024年5月，山东省大学生程序设计竞赛季军</p><p>2024年5月，北京市大学生程序设计竞赛银奖</p><p>2024年10月，全国大学生程序设计竞赛哈尔滨站银奖</p><p>2024年11月，国际大学生程序设计竞赛南京站金奖</p><p>2024年11月，全国大学生程序设计竞赛重庆站季军（与PKU随机匹配在榜单上并列第二，仅罚时多两秒，人生高光时刻）</p><p>2024年11月，国际大学生程序设计竞赛上海站银奖</p><h3 id="出题-验题">出题&amp;验题</h3><p>今年在内蒙省赛、杭电多校、校新生赛上各出了一道题，帮雄哥小验了一下广西省赛（就验了一道，但也算验题人是吧，简历里都是可以写的）。</p><p>内蒙省赛用的是我初一出的一道题，完全没改动，没想到全省只有两个队过。悄咪咪说一句，我不打acm的室友都做出来了，只不过用的矩阵快速幂，还有一些繁琐的步骤。std直接一个式子结束。<br><img src="./2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E5%86%85%E8%92%99%E7%9C%81%E8%B5%9B.png" alt=""></p><p>我着重讲一下杭电多校出的那道题吧，出完这道题的时候我整个人都惊了，这种难度的题我自己都很少很少能做出来，结果竟然被我出出来了。并且幸亏一队在验题的时候验出我题目的错误，不然就是丢大人了，而不是光辉事迹。</p><p>给大家看一下战绩：<br>全国打杭电多校的大学生队伍就四个队做出来，三支是PKU，高中生的话多俩杭二和南外的队伍。我何德何能啊。<br><img src="./2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1.png" alt=""></p><p>题目：$ x_1^{t_1}x_2^{t_2}…x_k^{t_k}\leq n $ 且 $gcd(x_1,x_2,…,x_k)=1$ ，求有序数对 $(x_1,x_2,…,x_k)$ 数量，答案对$1e9+7$取模</p><p>插播一下题目的加强过程。开始没有幂次，且x只有三个，我用容斥做的，交给林圣的时候被他用莫反秒了，并且表示大概率有原。后来OEIS上查到了。。。之后加强成x可以有k个，但依旧没有幂次，此时要用上min25筛了。再后来发现加上一个幂次后状态数很有限，用多重背包预处理方案数即可（我用了dfs+多重背包+组合数，看了他们的代码才发现想复杂了）。</p><p>题解：令$f(n)$表示$x_1^{t_1}x_2^{t_2}…x_k^{t_k}=n$ 且 $gcd(x_1,x_2,…,x_k)=1$ 数对数量，$F(n)=\sum_{i=1}^{n} f(i)$，则答案为$F(n)$</p><p>$gcd(x_1,x_2,…,x_k)=1$等价于每个质因子在$x_1,x_2,…,x_k$中次数的最小值都是0，易知各个质因子之间独立，$f$为积性函数，问题在于$f(p^c)$怎么求</p><p>$c&gt;1$时，$f(p^c)$等价于将$c$划分给$k$个数，第i个数必须是$t_i$的倍数，且$k$个数里至少有一个为$0$的方案数</p><p>用至多不超过$33^k$的时间dfs（$n=10^{10}$，$p^c$中c的取值小于等于33）预处理，可以得出结果</p><p>$f(p)=num_1$，其中$num_1$是$t_1,…,t_k$中1的数量，p只有1次，只能是1的倍数</p><p>此时发现$f(p)$为关于$p$的零次多项式，$f(p^c)$可快速求，可用min25筛快速求得</p><p>时间复杂度$O(\frac{n^\frac{3}{4}}{logn}+dfs)$，此时在$k\leq 8$情况下都没有问题</p><p>考虑枚举某个集合的元素均为0，剩余部分形如2w+2x+3y+4z=c（w,x,y,z&gt;=1）</p><p>如果已知2x+3y+4z在每个c处的方案数，那么可以$O(maxc^2)$的时间内推出2w+2x+3y+4z=c在每个c处的方案数</p><p>发现对于值相同的$t_i$，性质是一样的，可以直接用$t_i$这个值有几个来代替，不需要$2^k$枚举，加上一些剪枝，可以通过$k&lt;=60$的数据</p><h1>Part 2: 数模</h1><p>美赛的名额是靠acm金软磨硬泡出来的，训了两次就正式比赛了，拿了M奖非常的意料之外，因为之前只在新生赛做过一次数模，就一个成功参赛奖。跟她俩确实也学到很多数模的经验。但打完以后，我可以说就出师了，要学的东西很少，或者说都是可以现学的。</p><p>有了美赛的经历，加上周慧的鼓动，还有我需要保研的特推名额等种种因素，让我决定打国赛。软膜硬泡*2，训练三次即可打国赛。王景煜是个特别强的队友，文本、建模、代码都很顶级，只可惜周慧这货纯傻逼，之前打美赛根本没看清这个人，这直接导致最后只拿到了国二。</p><p>通过聊天记录说明一下国二的原因吧<br><img src="2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%951.png" alt=""> <img src="2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%952.png" alt=""> <img src="2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%953.png" alt=""></p><p>控诉一下周慧的n宗罪：完全听不懂我们的建模瞎出主意、二维的题目直接拿GPT生成三维的模型用、比赛期间游戏打到凌晨五点早上不来做题、问题复述都写不端正、没事干就在旁边打游戏干扰我们、抄个数据抄错了还是王景煜找出来的错误……但凡她有点正贡献，给我省下三四个小时的时间，我所有代码的变步长搜索的手动调参都可以改成自动调参，这也是我本来就要改的东西。她这些行为直接导致所有文本建模都是王景煜一人完成的，代码和结果都是我完成的，而且独立运作，到提交我都没有细看过一遍论文。</p><p><img src="2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E7%BE%8E%E8%B5%9B.png" alt="图片1"> <img src="2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E5%9B%BD%E8%B5%9B.png" alt="图片2"></p><p>国赛成绩在<a href="https://dxs.moe.gov.cn/zx/awards/index.shtml">中国大学生助手</a>中查询</p><h1>Part 3: 一些不算项目的项目或未完成的项目</h1><h3 id="华为嵌入式软件大赛">华为嵌入式软件大赛</h3><p>初赛交了个输出0的代码，结果直接进复赛了。但我真没想好好打复赛，练习赛就草草写了个还跑不出的代码就去杭研所了，没想到最后跑出来了，还跑了22w分，第六名。一共开放了三个月的时间大概，我就做了一个下午+一晚上+比赛的五个小时就第六了，真是意外。</p><h3 id="三维重建">三维重建</h3><p>题目就是给定rgb图、深度图和相机内参，重建模型和渲染。<br>主要靠的龙哥和慧源。但我该做的也都做了，nerf跟着跑了，sam分割图像部分我做了，还做了个手动标点的小工具。但最后就19名，也没成果产出，用的都是开源的东西，似乎也不好放进简历，算是个小锻炼吧。</p><h3 id="微表面建模">微表面建模</h3><p>在做</p><h1>Part 4: 一些零零散散的小收获</h1><h3 id="健身">健身</h3><p>体重从120增到了140，能稍微看出点肌肉了（但还是细狗一只，慢慢练吧，手有缺陷，强度大会痛）。体测的时候引体硬拉15个，立定跳远2.80，还挺满意的。</p><h3 id="唱歌">唱歌</h3><p>基本功一直不大扎实，且不大学的会（真的已经努力了，还花了小两千买线上课自己学，真学不会），所以干脆退了合唱队的训练群，自己瞎练。还真给我练出点东西来了。</p><p><a href="https://www.bilibili.com/video/BV1zTWSeREo4/?spm_id_from=333.1387.homepage.video_card.click">High D, 不是假音哦</a></p><p>然后3.24看了张杰演唱会上海站，5月123场外看了两场演唱会。张杰的唱过的歌我现在至少会唱一百首！</p><p>邓紫棋演唱会todo</p><h3 id="双放手">双放手</h3><p>双放手录的视频不多，只能放一下这个有点丢人的了</p><p><a href="/htmls/%E5%8F%8C%E6%94%BE%E6%89%8B.html">双放手录视频+唱歌，九十度弯摔了</a></p><h3 id="汇报">汇报</h3><p>进行了国奖答辩、科创先锋、笃学模范、青年领英的答辩，颇有收获，知道了汇报的重心、评奖的机制和其核心要领等等（不细讲了，这部分就写给自己看一下），希望明年能汲取今年积累的经验，百战百胜。</p><h3 id="一些更没用的小玩意儿">一些更没用的小玩意儿</h3><p>比如上面用高德api做的地图、比如搭了博客（虽然都用的别的人东西，但对我这个小白来讲还是新学了不少东西的）、比如装机</p><p>化妆会了一捏捏，但从来不用，或者说只有不见人的时候才会自己玩玩。双眼皮贴会贴了，直板夹能稍微夹出点纹理，素颜霜会涂，知道化妆的流程，所以也没很卡粉，还能消黑眼圈和遮痘印。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建过程记录</title>
      <link href="//post/%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95.html"/>
      <url>//post/%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p>以下是自己的搭建过程（包括怎么git）：</p><h3 id="1-建立名为-username-github-io的储存库">1. 建立名为 <strong><a href="http://username.github.io">username.github.io</a></strong>的储存库</h3><h3 id="2-first-commit">2. first commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~$ <span class="built_in">mkdir</span> blog</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~$ <span class="built_in">cd</span> blog</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$  git push -u origin main</span><br><span class="line">fatal: 不是 git 仓库（或者直至挂载点 / 的任何父目录）</span><br><span class="line">停止在文件系统边界（未设置 GIT_DISCOVERY_ACROSS_FILESYSTEM）。</span><br></pre></td></tr></table></figure><p>完全按hexo步骤来会在这步卡住，因为git仓库都没有初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ <span class="built_in">echo</span> <span class="string">&quot;# xmy1107.github.io&quot;</span> &gt;&gt; README.md</span><br><span class="line">（这里漏了git init，这个记得输入）</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git add README.md</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">[main （根提交） 8956e78] first commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote add origin https://github.com/xmy1107/xmy1107.github.io.git</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git push -u origin main</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://github.com&#x27;</span>: xmy1107</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://xmy1107@github.com&#x27;</span>: </span><br></pre></td></tr></table></figure><p>这里初始化并进行第一次提交以后就建站成功了。注意password不是你用户的密码，而是personal access token。如果是ssh连接就是这样（我用PAT能登进去，但每次都要重新输入，但用ssh在把公钥放进去以后不用这样，就用ssh了）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote get-url origin</span><br><span class="line">https://github.com/xmy1107/xmy1107.github.io.git</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote set-url origin git@github.com:xmy1107/xmy1107.github.io.git</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote get-url origin</span><br><span class="line">git@github.com:xmy1107/xmy1107.github.io.git</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git push -u origin main</span><br><span class="line">枚举对象中: 3, 完成.</span><br><span class="line">对象计数中: 100% (3/3), 完成.</span><br><span class="line">写入对象中: 100% (3/3), 227 字节 | 227.00 KiB/s, 完成.</span><br><span class="line">总共 3（差异 0），复用 0（差异 0），包复用 0</span><br><span class="line">To github.com:xmy1107/xmy1107.github.io.git</span><br><span class="line"> * [new branch]      main -&gt; main</span><br><span class="line">分支 <span class="string">&#x27;main&#x27;</span> 设置为跟踪 <span class="string">&#x27;origin/main&#x27;</span>。</span><br></pre></td></tr></table></figure><p>然后在 <strong><a href="https://xmy1107.github.io/">https://xmy1107.github.io/</a></strong> 下就有一个空的网页：</p><p><img src="%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20240925132827002.png" alt="image-20240925132827002"></p><p>ps：PAT想要不每次输密码可以尝试</p><p><code>vim ~/.gitconfig</code>后输入以下内容（虽然我没成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[init]</span><br><span class="line">        defaultBranch = main</span><br><span class="line">[user]</span><br><span class="line">        name = </span><br><span class="line">        email = </span><br><span class="line">[github]</span><br><span class="line">        token = </span><br></pre></td></tr></table></figure><h3 id="3-网站正式建立">3. 网站正式建立</h3><p>上面是因为只push了一个README，下面对github工作流配置后再次push可以得到”正常“的一个网页</p><ol><li><p>使用 <code>node --version</code> 指令检查你电脑上的 Node.js 版本。 记下主要版本（我是<code>v20.17.0</code>）</p></li><li><p>在储存库中前往 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong> 。 将 source 更改为 <strong>GitHub Actions</strong>，然后保存。</p></li><li><p>在储存库中建立 <code>.github/workflows/pages.yml</code>，并填入以下内容 (将 <code>20</code> 替换为上个步骤中记下的版本)：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.github/workflows/pages.ymlname:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">recursive</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span></span><br><span class="line">          <span class="comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Pages</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-pages-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./public</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">pages:</span> <span class="string">write</span></span><br><span class="line">      <span class="attr">id-token:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">github-pages</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.deployment.outputs.page_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">deployment</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/deploy-pages@v4</span></span><br></pre></td></tr></table></figure><p>这个过程相当于<code>hexo generate</code>和<code>hexo deploy</code>，区别是在<code>git push</code>时才执行，然后用github工作流完成渲染和部署。</p><p>这一步结束后重新打开博客便是如下页面：</p><p><img src="%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20240925134647445.png" alt="image-20240925134647445"></p><ol start="5"><li>部署完成后，前往 <em>username</em>.github.io/<em>repository</em> 查看网页。</li></ol><h3 id="5-一键部署">5.一键部署</h3><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>，即输入<code>npm install hexo-deployer-git --save</code></li><li>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  # 我这里是git@github.com:xmy1107/xmy1107.github.io.git，因为我是ssh连接的</span><br><span class="line">  # git@github.com:xmy1107/blog.git是项目页面</span><br><span class="line">  branch: main # hexo给的是gh-pages，无所谓</span><br></pre></td></tr></table></figure><ol start="3"><li>这里要把网站建立中<strong>GitHub Actions</strong>改回<strong>Deploy from a branch</strong>，因为使用 <code>hexo d</code> 时，它会跳过 GitHub Actions，直接将 <code>public</code> 文件夹中的静态文件推送到 <code>gh-pages</code> 分支。 GitHub Actions对应的操作是<code>git push</code></li><li>执行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</li><li>浏览 <em>username</em>.github.io，检查你的网站能否运作。</li></ol><h3 id="6-后续配置">6.后续配置</h3><p>主题选用<a href="https://github.com/PhosphorW/hexo-theme-academia">Academia</a></p><p>改用<a href="https://github.com/auroral-ui/hexo-theme-aurora">aurora</a></p><h3 id="7-aurora">7.aurora</h3><p>见<a href="https://aurora.tridiamond.tech/cn/guide/getting-started.html">doc</a></p><h3 id="8-一些自己写博客的注意点">8.一些自己写博客的注意点</h3><p>贴html用相对路径：<code>[去各地比赛的地图，标签可拖动](/map_html/index.html)</code></p><p>贴图片用绝对路径：<code>![image-20240925134647445](搭建过程记录/image-20240925134647445.png)</code>，便于显示</p><p><img src="%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/QQ20241209-231620.png" alt="本地的目录，供以后参考"></p><p>html文件要禁止渲染，默认会渲染并且放进page目录中。需要在config中加入以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  htmls/**/*.html</span><br></pre></td></tr></table></figure><p>要放进地址栏的部分得用英文字符，但只是文件链接就不用</p><p><code>[双放手录视频+唱歌，九十度弯摔了](/htmls/双放手.html)</code></p><p>html文件中是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/videos/shuangfangshou.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持视频标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hexo s后台运行：</p><p><img src="./%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/houtai.png" alt=""></p><h1>没搞清楚的部分</h1><h3 id="项目页面（这部分没完全搞清楚）">项目页面（这部分没完全搞清楚）</h3><ol><li>导航到 GitHub 上的存储库。 转到 <strong>Settings</strong> 选项卡。 建立名为 <code>&lt;repository 的名字&gt;</code> 的储存库，这样你的博客网址为 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>，repository 的名字可以任意，例如 blog 或 hexo。</li><li>编辑你的 <code>_config.yml</code>，将 <code>url:</code> 更改为 <code>&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>。</li><li>在 GitHub 仓库的设置中，导航至 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong> 。 将 source 更改为 <strong>GitHub Actions</strong>，然后保存。</li><li>Commit 并 push 到默认分支上。</li></ol><p>注意这里要修改远程的仓库，需要push到新建的那个仓库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote set-url origin git@github.com:xmy1107/blog.git</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git remote -v</span><br><span class="line">origingit@github.com:xmy1107/blog.git (fetch)</span><br><span class="line">origingit@github.com:xmy1107/blog.git (push)</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git add .</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git status</span><br><span class="line">位于分支 main</span><br><span class="line">您的分支与上游分支 <span class="string">&#x27;origin/main&#x27;</span> 一致。</span><br><span class="line"></span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git restore --staged &lt;文件&gt;...&quot;</span> 以取消暂存）</span><br><span class="line">修改：     _config.yml</span><br><span class="line"></span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">[main fa6cdc7] first commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">(base) xmy@xmy-Z790M-AORUS-ELITE-AX:~/blog$ git push</span><br><span class="line">枚举对象中: 30, 完成.</span><br><span class="line">对象计数中: 100% (30/30), 完成.</span><br><span class="line">使用 16 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (19/19), 完成.</span><br><span class="line">写入对象中: 100% (30/30), 31.32 KiB | 3.48 MiB/s, 完成.</span><br><span class="line">总共 30（差异 3），复用 0（差异 0），包复用 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">To github.com:xmy1107/blog.git</span><br><span class="line"> * [new branch]      main -&gt; main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
